Interactive Conversation

Usr: I want to prove a statement.
Sys: [State Goal] Tell me the statement.

Usr: Assume any integers a, b, d.
Usr: Assume also that d divides a and b.
Sys: [State Goal] {a b d : ℤ} (hd : d ∣ a ∧ d ∣ b)
Usr: Assume that d is GCD of a and b.
Sys: [State Goal] {a b d : ℤ} (hd : d ∣ a ∧ d ∣ b) (h: d = a.gcd b)
Usr: Then GCD of (a / d) and (b / d) is 1 [^1]
Sys: [State Goal] Statement understood.
  example {a b d : ℤ} (hd : d ∣ a ∧ d ∣ b) (h: d = a.gcd b) :
    (a / d).gcd (b / d) = 1

Sys: [Proof] Receiving proof.
Usr: First assume d=gcd(a,b).
Sys: [Proof] (silent: labeled with h)
Usr: As d divides a and b, we have a=a'd and b=b'd for some a', b' in Z.
     [Inject Reasoning] This is by the definition of divisibility.
Sys: (silent: unpack definition of divisibility to find such a' and b')
Usr: Using a property of GCD, we have gcd(a'd, b'd) = d gcd(a', b').
Sys: [Intervention] Why so?
Usr: Search known theorems.
Sys: [Intervention]
  I found a theorem, but it requres d to be a natural number, not integer.
  What do you want to do with this?
Usr: Use that d=gcd(a,b).


{^label}: Label the statement.
[^ref]: Back up the statement with previous labeled statements.

First assume d=gcd(a,b){^eq1}.
As d divides a and b, we have a=a'd{^def1} and b=b'd{^def2} for some a', b' in Z.
So we can write d=gcd(a'd,b'd).{^eq3}[^eq1,^def1,^def2]
Since any GCD is positive, d is positive {^d-pos}[^thm-gcd-pos,^eq1].
Using the property of GCD, we have gcd(a'd, b'd) = d gcd(a', b').
{^eq4}[^gcd_mul_mul,^d-pos]
Thus we have d=d gcd(a', b').{^eq5}[^eq3,^eq4]
Dividing by d, we get 1 = gcd(a', b').
[^eq5,^thm-left-mul-eq-iff,^d-pos]
Have a'=a/d and b'=b/d from a=a'd and b=b'd.
Substitue these to conclude the proof.


(Option 2)
Usr: Make this goal a lemma.
Sys: [State Goal] OK.
  example {a' b' d : ℤ} : (a'd).gcd (b'd) = d * a'.gcd b'
Usr: This is too complicated. 
Sys: [State Goal] OK.
  example {a' b' d : ℤ} : (a'd).gcd (b'd) = d * a'.gcd b'
Usr: Let v = d*gcd(a', b')
Sys: OK. (`set v d*gcd(a', b') `)
Usr: 


[^1]: "Then X holds" can mean multiple things. 
(i) It is the goal of a statement. (ii) It is the consequence of a proof.

import Mathlib.NumberTheory.Basic

/-
theorem gcd_div_gcd_eq_one {a b d : ℤ} (hd : d ∣ a ∧ d ∣ b) :
  d =  a.gcd b ↔ (a / d).gcd (b / d) = 1 

  First assume d=gcd(a,b).
  As d divides a and b, we have a=a'd and b=b'd for some a', b' in Z.
  So we can write d=gcd(a'd,b'd).
  Using the property of GCD, we have gcd(a'd, b'd) = d gcd(a', b')
  (**Note that we use d > 0 here**)
  Thus we have d=d gcd(a', b').
  (**We use transitivity of equality here, corresponding to `trans`**)
  Dividing by d, we get 1 = gcd(a', b').
  (**We use that d is nonzero here.**)
  Substitute a'=a/d and b'=b/d to conclude the proof.
  (**Implicitly uses that a=a'd implies a'=a/d in Z**)

  Takeaways:
  - Mathematicians does a lot of arguements without saying, proving, or even thinking! (relative to Lean core)
  - Many such 'silent' reasonings need different Lean tactics 

  - Should a NLP->Lean system automatically reason out such 'jumps'?
  - Or, should we ask the user to write reasonings more atomically?
  -/

  theorem gcd_div_gcd_eq_one {a b d : ℤ} (hd : d ∣ a ∧ d ∣ b) :
    d =  a.gcd b ↔ (a / d).gcd (b / d) = 1 :=

    by
      constructor

        · intro h
            rw [h]

                sorry
                  · intro h


                      sorry
